name: CICD

on:
  workflow_dispatch:
    inputs:
      image-tag:
        required: true
        type: string
      dockerfile:
        required: true
        default: 'Commands'
        type: choice
        options:
        - 'Commands'
        - 'Listener'
        - 'Projections'
        - 'Queries'
        
jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true
    steps:

      - run: echo "REPO_NAME=${{ github.event.inputs.dockerfile }}" >> $GITHUB_ENV
      
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - run: echo ${{ steps.login-ecr.outputs.registry }}

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: afranczak-${{ env.REPO_NAME }}
          IMAGE_TAG: ${{ github.event.inputs.image-tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ github.event.inputs.dockerfile }}.Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
